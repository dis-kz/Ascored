//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Extensions;
using LinqToDB.Mapping;

namespace DataModels
{
	/// <summary>
	/// Database       : Ascored
	/// Data Source    : localhost
	/// Server Version : 14.00.1000
	/// </summary>
	public partial class AscoredDB : LinqToDB.Data.DataConnection
	{
		public ITable<Assembly>         Assemblies        { get { return this.GetTable<Assembly>(); } }
		public ITable<Component>        Components        { get { return this.GetTable<Component>(); } }
		public ITable<ComponentGroup>   ComponentGroups   { get { return this.GetTable<ComponentGroup>(); } }
		public ITable<Order>            Orders            { get { return this.GetTable<Order>(); } }
		public ITable<OrderProduct>     OrderProducts     { get { return this.GetTable<OrderProduct>(); } }
		public ITable<ParamSet>         ParamSets         { get { return this.GetTable<ParamSet>(); } }
		public ITable<Product>          Products          { get { return this.GetTable<Product>(); } }
		public ITable<ProductAssembly>  ProductAssemblies { get { return this.GetTable<ProductAssembly>(); } }
		public ITable<ProductComponent> ProductComponents { get { return this.GetTable<ProductComponent>(); } }

		public AscoredDB()
		{
			InitDataContext();
			//InitMappingSchema();
		}

		public AscoredDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			//InitMappingSchema();
		}

        public AscoredDB(string providerName, string configuration)
            :base(providerName, configuration)
        {
            InitDataContext();
        }

		partial void InitDataContext  ();
		partial void InitMappingSchema();

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		private static MethodInfo _freeTextTableMethod1 = typeof(AscoredDB).GetMethod("FreeTextTable", new Type[] { typeof(string), typeof(string) });

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod1,
				field,
				text);
		}

		private static MethodInfo _freeTextTableMethod2 = 
			typeof(AscoredDB).GetMethods()
				.Where(m => m.Name == "FreeTextTable" &&  m.IsGenericMethod && m.GetParameters().Length == 2)
				.Where(m => m.GetParameters()[0].ParameterType.IsGenericTypeEx() && m.GetParameters()[0].ParameterType.GetGenericTypeDefinition() == typeof(Expression<>))
				.Where(m => m.GetParameters()[1].ParameterType == typeof(string))
				.Single();

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable, TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod2,
				fieldSelector,
				text);
		}

		#endregion
	}

	[Table(Schema="dbo", Name="Assembly")]
	public partial class Assembly
	{
		[PrimaryKey, NotNull] public Guid   AssemblyGuid   { get; set; } // uniqueidentifier
		[Column,     NotNull] public string Name           { get; set; } // varchar(50)
		[Column,     NotNull] public Guid   ComponentGuid  { get; set; } // uniqueidentifier
		[Column,     NotNull] public int    ComponentCount { get; set; } // int
	}

	[Table(Schema="dbo", Name="Component")]
	public partial class Component
	{
		[PrimaryKey, NotNull    ] public Guid     ComponentGuid      { get; set; } // uniqueidentifier
		[Column,     NotNull    ] public Guid     ComponentGroupGuid { get; set; } // uniqueidentifier
		[Column,     NotNull    ] public string   Name               { get; set; } // varchar(50)
		[Column,        Nullable] public string   Reference          { get; set; } // varchar(100)
		[Column,        Nullable] public decimal? Price              { get; set; } // decimal(18, 2)
	}

	[Table(Schema="dbo", Name="ComponentGroup")]
	public partial class ComponentGroup
	{
		[PrimaryKey, NotNull] public Guid   ComponentGroupGuid { get; set; } // uniqueidentifier
		[Column,     NotNull] public string Name               { get; set; } // varchar(50)
	}

	[Table(Schema="dbo", Name="Order")]
	public partial class Order
	{
		[PrimaryKey, NotNull    ] public Guid     OrderGuid { get; set; } // uniqueidentifier
		[Column,     NotNull    ] public string   Customer  { get; set; } // varchar(100)
		[Column,     NotNull    ] public string   Number    { get; set; } // varchar(50)
        [Column, NotNull] public decimal Cost      { get; set; } // decimal(18, 2)
        [Column, NotNull] public int     Status    { get; set; } // int
        [Column, NotNull] public DateTime ModifiedDate { get; set; }//datetime
	}

	[Table(Schema="dbo", Name="OrderProduct")]
	public partial class OrderProduct
	{
		[PrimaryKey, NotNull] public Guid OrderProductGuid { get; set; } // uniqueidentifier
		[Column,     NotNull] public Guid OrderGuid        { get; set; } // uniqueidentifier
		[Column,     NotNull] public Guid ProductGuid      { get; set; } // uniqueidentifier
		[Column,     NotNull] public int  ProductCount     { get; set; } // int
	}

	[Table(Schema="dbo", Name="ParamSet")]
	public partial class ParamSet
	{
		[PrimaryKey, NotNull    ] public Guid   ParamSetGuid       { get; set; } // uniqueidentifier
		[Column,        Nullable] public string ClimatModification { get; set; } // varchar(50)
		[Column,        Nullable] public string IP                 { get; set; } // varchar(4)
		[Column,        Nullable] public string Size               { get; set; } // varchar(50)
		[Column,        Nullable] public string Weight             { get; set; } // varchar(50)
		[Column,        Nullable] public string LocalCategory      { get; set; } // varchar(50)
		[Column,        Nullable] public string FireCategory       { get; set; } // varchar(50)
		[Column,        Nullable] public string FireWithstanding   { get; set; } // varchar(50)
	}

	[Table(Schema="dbo", Name="Product")]
	public partial class Product
	{
		[PrimaryKey, NotNull] public Guid   ProductGuid  { get; set; } // uniqueidentifier
		[Column,     NotNull] public string Name         { get; set; } // varchar(50)
		[Column,     NotNull] public int    Quantity     { get; set; } // int
		[Column,     NotNull] public Guid   ParamSetGuid { get; set; } // uniqueidentifier
	}

	[Table(Schema="dbo", Name="ProductAssembly")]
	public partial class ProductAssembly
	{
		[PrimaryKey, NotNull] public Guid ProductAssemblyGuid { get; set; } // uniqueidentifier
		[Column,     NotNull] public Guid AssemblyGuid        { get; set; } // uniqueidentifier
		[Column,     NotNull] public int  AssemblyCount       { get; set; } // int
	}

	[Table(Schema="dbo", Name="ProductComponent")]
	public partial class ProductComponent
	{
		[Column, NotNull] public Guid ProductComponentGuid { get; set; } // uniqueidentifier
		[Column, NotNull] public Guid ProductGuid          { get; set; } // uniqueidentifier
		[Column, NotNull] public Guid ComponentGuid        { get; set; } // uniqueidentifier
		[Column, NotNull] public int  ComponentCount       { get; set; } // int
	}

	public static partial class TableExtensions
	{
		public static Assembly Find(this ITable<Assembly> table, Guid AssemblyGuid)
		{
			return table.FirstOrDefault(t =>
				t.AssemblyGuid == AssemblyGuid);
		}

		public static Component Find(this ITable<Component> table, Guid ComponentGuid)
		{
			return table.FirstOrDefault(t =>
				t.ComponentGuid == ComponentGuid);
		}

		public static ComponentGroup Find(this ITable<ComponentGroup> table, Guid ComponentGroupGuid)
		{
			return table.FirstOrDefault(t =>
				t.ComponentGroupGuid == ComponentGroupGuid);
		}

		public static Order Find(this ITable<Order> table, Guid OrderGuid)
		{
			return table.FirstOrDefault(t =>
				t.OrderGuid == OrderGuid);
		}

		public static OrderProduct Find(this ITable<OrderProduct> table, Guid OrderProductGuid)
		{
			return table.FirstOrDefault(t =>
				t.OrderProductGuid == OrderProductGuid);
		}

		public static ParamSet Find(this ITable<ParamSet> table, Guid ParamSetGuid)
		{
			return table.FirstOrDefault(t =>
				t.ParamSetGuid == ParamSetGuid);
		}

		public static Product Find(this ITable<Product> table, Guid ProductGuid)
		{
			return table.FirstOrDefault(t =>
				t.ProductGuid == ProductGuid);
		}

		public static ProductAssembly Find(this ITable<ProductAssembly> table, Guid ProductAssemblyGuid)
		{
			return table.FirstOrDefault(t =>
				t.ProductAssemblyGuid == ProductAssemblyGuid);
		}
	}
}

#pragma warning restore 1591
